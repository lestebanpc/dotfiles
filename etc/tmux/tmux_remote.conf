# Info de tmux:
#  > Changelog: https://github.com/tmux/tmux/blob/master/CHANGES
#  > Wiki     : https://github.com/tmux/tmux/wiki
#  > OSC 52   : Soporte desde la variosn 2.5
# Version modificada de 'oh-my-tmux' creado/liderado por Gregory Pakosz (@gpakosz).
#  > URL      : https://github.com/gpakosz/.tmux
#  > Tmux >= 2.6

#-----------------------------------------------------------------------------------------
# Variables de Entorno
#-----------------------------------------------------------------------------------------
#
# Consideraciones:
#  > Se usan directivas condicionales para se ejecute una solo vez (cuando se crea el servidor tmux y no cuando se recargar el
#    el script ('source-file').
#  > Las variable de entorno 'TERM_PROGRAM' y 'TERM_PROGRAM_VERSION', indica un nombre (amigable, no necesariamente el nombre
#    del comando) y la version del emulador de terminal usada. Tmux, desde la version 3.2, despues de iniciar el servidor tmux
#    es definido/modificado, es decir, cuando se ejecute este script por primera vez, los valores de la variables es la terminal
#    usada para iniciar tmux y aun no es valor cambiado por tmux (valor 'tmux' y la version de tmux).
#

#1. Variables de entorno definidas por el usuario

# Ruta del repositorio GIT (donde se almacena los script para el setup y la plantilla personalizado de archivo de configuracion)
%if #{==:#{MY_REPO_PATH},}
  set-environment -g MY_REPO_PATH "$HOME/.files"
%endif
#display-message 'TERM: #{TERM}, TERM_PROGRAM: #{TERM_PROGRAM}, TERM_PROGRAM_VERSION: #{TERM_PROGRAM_VERSION}'


#2. Variables de entorno calculado usando la informacion de inicio del servidor Tmux

# Nombre del programa tmux. Ejemplo: '/usr/bin/tmux'
%if #{==:#{TMUX_PROGRAM},}
  run-shell 'TMUX_PROGRAM="$(LSOF=$(PATH="$PATH:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin" command -v lsof); $LSOF -b -w -a -d txt -p #{pid} -Fn 2>/dev/null | perl -n -e "if (s/^n((?:.(?!dylib$|so$))+)$/\1/g && s/(?:\s+\([^\s]+?\))?$//g) { print; exit } } exit 1; {" || readlink "/proc/#{pid}/exe" 2>/dev/null)"; {[ -f "$TMUX_PROGRAM" ] && [ -x "$TMUX_PROGRAM" ]} || TMUX_PROGRAM="$(command -v tmux || printf tmux)"; "$TMUX_PROGRAM" -S #{socket_path} set-environment -g TMUX_PROGRAM "$TMUX_PROGRAM"'
%endif

# Ruta de socket IPC del servidor tmux. Ejemplo: '/tmp/tmux-1000/default'
%if #{==:#{TMUX_SOCKET},}
  run-shell '"$TMUX_PROGRAM" -S #{socket_path} set-environment -g TMUX_SOCKET "#{socket_path}"'
%endif

# La ruta del archivo de configuracion principal
%if #{==:#{TMUX_CONF},}
  run-shell '"$TMUX_PROGRAM" set-environment -g TMUX_CONF $(file="#{current_file}"; case "$file" in "") printf "%s" "$MY_REPO_PATH/etc/tmux/tmux_local.conf";; /*) printf "%s" "$file";; *)  realpath "$file";; esac)'
%endif

# Version de TMUX entero y comparable, por ejemplo '3.2a' convierte a 320, '2.56' convierte a 256, '2.506' convierte a 250
#  - Opcion 'version' se define en la version 2.5
%if #{==:#{TMUX_VERSION},}
  run-shell '"$TMUX_PROGRAM" set-environment -g TMUX_VERSION $(echo "#{version}" | sed -En "s/^[^0-9]*([.0-9]+).*/\1/p" | awk "{ print int(\$1*100) }")'
%endif


#3. Variables de entorno adicionales

# Ruta donde estan los script requeridos para el setup
%if #{==:#{TMUX_SHELL_PATH},}
  run-shell '"$TMUX_PROGRAM" set-environment -g TMUX_SHELL_PATH "$MY_REPO_PATH/shell/bash/bin/tmux"'
%endif

# Ruta del archivo de configuracion personalizable
%if #{==:#{TMUX_CUSTOM_CONF},}
  run-shell '"$TMUX_PROGRAM" set-environment -g TMUX_CUSTOM_CONF $(if [ -f "${XDG_CONFIG_HOME:-$HOME/.config}/tmux/tmux_custom.conf" ]; then printf "%s" "${XDG_CONFIG_HOME:-$HOME/.config}/tmux/tmux_custom.conf"; else printf "%s" "$MY_REPO_PATH/etc/tmux/tmux_custom_template_remote.conf"; fi)'
%endif

# Variables de entorno con las rutas de script requeridos por 'ohmytmux'
# Por ahora aun esta variable no se calculado internamente (en el script usando la variable 'TMUX_SHELL_PATH'),
# la logica del script 'fun_ohmytmux.sh' depende de estas variables.
%if #{==:#{TMUX_SHELL_OHMYTMUX},}
  run-shell '"$TMUX_PROGRAM" set-environment -g TMUX_SHELL_OHMYTMUX "$TMUX_SHELL_PATH/fun_ohmytmux.sh"'
%endif

#%if #{==:#{TMUX_SHELL_CUSTOM_STATUSBAR},}
#  run-shell '"$TMUX_PROGRAM" set-environment -g TMUX_SHELL_CUSTOM_STATUSBAR "$TMUX_SHELL_PATH/fun_custom_statusbar.sh"'
#%endif



#-----------------------------------------------------------------------------------------
# Opciones de la pseudo-terminal creado por tmux
#-----------------------------------------------------------------------------------------

#1. Opciones generales

# Definir el tipo de pseudo-terminal a usar
set-option -g default-terminal "tmux-256color"
#set-option -g default-terminal "${TERM}"

# Habiitar el 'True Color' (24b colors) en tipo de pseudoterminal definidio
#set-option -as terminal-overrides ",xterm-256color:Tc"


#2. Capacidades adicionales a la pseudo-terminal

# Undercurl support
set-option -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'

# Underscore colours (tmux >= 3.0)
set-option -as terminal-overrides ',*:Setulc=\E[58::2::::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'

#3. Otros

# Estilo por defecto del borde del popup
set -g popup-border-style fg='#808080'

# Estilo por defecto del borde del menu-popup
set -g menu-border-style fg='#808080'



#-----------------------------------------------------------------------------------------
# Opciones Generales
#-----------------------------------------------------------------------------------------

# Compatibilidad con los keybinding usados por terminal xtern
set-option -w -g xterm-keys on
#set-window-option -g xterm-keys on

# Faster command sequences
set-option -s escape-time 10

# Increase repeat timeout
set-option -sg repeat-time 600
set-option -s focus-events on

# Establecer el 1er prefijo
unbind C-b
set-option -g prefix C-a

# Establecer el 2do prijo (no usarlo)
#set-option -g prefix2 None

# No destruye la sesion actual si se elimina todos las ventanas y peneles de este mientras existe otras sesiones.
set -g detach-on-destroy off

# Expect UTF-8 (tmux < 2.2)
set-option -q -g status-utf8 on
set-option -w -q -g utf8 on
#set-window-option -q -g utf8 on

# Boost history
set-option -g history-limit 10000

# Estilo 'vi' para el 'copy mode' de tmux
set-option -w -g mode-keys vi
#set-window-option -g mode-keys vi

# Estilo 'vi' para el 'Read Commnad Line' de tmux (navegacion y edicion del texto ingresado en un prompt de tmux)
#set-option -g status-keys vi



#-----------------------------------------------------------------------------------------
# Opciones de Display
#-----------------------------------------------------------------------------------------

# Start windows numbering at 1
set-option -g base-index 1

# Make pane numbering consistent with windows
set-option -w -g pane-base-index 1
#set-window-option -g pane-base-index 1

# Rename window to reflect current program
set-option -w -g automatic-rename on
#set-window-option -g automatic-rename on

# Renumber windows when a window is closed
set-option -g renumber-windows on

# Set terminal title
set-option -g set-titles on

# Slightly longer pane indicators display time
set-option -g display-panes-time 800

# Slightly longer status messages display time
set-option -g display-time 1000

# Redraw status line every 10 seconds
set-option -g status-interval 10

# Activity
set-option -g monitor-activity on
set-option -g visual-activity off



#-----------------------------------------------------------------------------------------
# Opcion para 'Write to Clipboard'
#-----------------------------------------------------------------------------------------
#
# Obtenido de 'https://github.com/tmux/tmux/wiki/Clipboard'
#
# > La terminal ofrece mecanismos nativos de lectura/escritura de clipboard desde el prompt de la terminal.
#   > Permite que el usuario desde el promp de la terminal, puede acceder a la terminal usando keybinding como "Ctrl+C" y "Ctrl+V".
#   > La terminal restringe que los comando que se ejecutan la terminal accedan al estos API de la terminal para escritura de la terminal,
#   > Las terminales modernas ofrecen un mecanismo estándar (OSC 52) para que los comando permiten escribir en el clipboard donde esta la terminal.
#     En OSC  52, los comandos envíen texto y soliciten a la terminal que escriban al clipboard.
# > Las terminales no ofrecen un mecanismo estándar para que los comando permiten leer el clipboard que tiene acceso la terminal.
# > Los comando en ejecución interactiva de una terminal debe implementar sus propios mecanismos de lectura y escritura.
# > La variable de entorno 'TMUX_SET_CLIPBOARD' calculado automaticamente (solo una vez) por este script y sus posibles valores son:
#     > No se ha podido establecer un mecanismo del clipboard (usar comandos externo, pero no estan instalados).
#   0 > Usa 'set-clipboard off' (desactivar el escribir al clipboard).
#   1 > Usa 'set-clipboard on' y usar el OSC52 para escribir en el clipboard.
#   2 > Usa 'set-clipboard external' y usar comandos externos para escribir en el clipboard.
#

# Remover el keymapping. El keymapping lo generara la funcion 'setting_clipboard'
unbind-key -T copy-mode-vi Enter
unbind-key -T copy-mode-vi MouseDragEnd1Pane

# Remover el keymapping para copiar al clipboard (solo se usara 'Enter', esto usara para la navegacion del panel)
unbind-key -T copy-mode-vi 'C-j'

# Parametro de entrada:
# 1> La variable el key que se ascociará al copiado del buffer en modo copia (accion 'copy-pipe-and-cancel' en el modo 'copy-mode-vi')
# 2> La variable de entorno 'SET_CLIPBOARD' establecida por el USUARIO, y pueden tener los siguientes valores:
#       > Determinar automaticamente la opcion correcta (si la terminal soporta OSC lo habilta, si no usa comandos externos).
#     0 > Usa 'set-clipboard off' (desactivar el escribir al clipboard).
#     1 > Usa 'set-clipboard on' y usar el OSC52 para escribir en el clipboard.
#     2 > Usa 'set-clipboard external' y usar comandos externos para escribir en el clipboard.
#   Puede usarlo, la cuando crea la primera session:
#   Ejemplo 1:
#     SET_CLIPBOARD=1 tmux new-session -s main -n w01
#   Ejemplo 2:
#     export SET_CLIPBOARD=1
#     tmux new-session -s main -n w01
run-shell 'bash "$TMUX_SHELL_PATH/fun_general.bash" setting_clipboard y #{SET_CLIPBOARD}'

# Programas ejecutados dentre de tmux deben codificar OSC-52 usado por tmux.
# Los programas a las cuales se ha implementan esta logica son: 'vim', 'nvim'.
set-environment -g OSC52_FORMAT 2



#-----------------------------------------------------------------------------------------
# Keybinding> General
#-----------------------------------------------------------------------------------------

# Enviar 'ctrl + a' cuando se presiona el 2do 'ctrl + a' (solo usado cuando 'ctrl + a' es prefix)
# > '-2' se usa para que no espere el tiempo 'repeat-time' ms  para recien procesdar la 2da tecla.
bind-key C-a send-prefix -2

# Clear both screen and history
#bind-key -n C-l send-keys C-l \; run-shell 'sleep 0.2' \; clear-history

# Reload configuration
#bind-key r run-shell '"$TMUX_PROGRAM" ${TMUX_SOCKET:+-S "$TMUX_SOCKET"} source "$TMUX_CONF"' \; display "#{TMUX_CONF} sourced"

# Maximize current pane
#bind-key + run-shell "bash '#{TMUX_SHELL_PATH}/fun_actions.bash' maximize_pane '#{session_name}' '#D'"


# Toggle mouse
bind-key m run-shell "bash '#{TMUX_SHELL_PATH}/fun_actions.bash' toggle_mouse"


#-----------------------------------------------------------------------------------------
# Keybinding> TMUX Session
#-----------------------------------------------------------------------------------------

# Create session
#bind-key C-c new-session

# Find session
#bind-key C-f command-prompt -p find-session 'switch-client -t %%'

# Session navigation
#bind-key BTab switch-client -l  # move to last session



#-----------------------------------------------------------------------------------------
# Keybinding> TMUX Windows
#-----------------------------------------------------------------------------------------

#1. Nueva ventana
#unbind-key c
#bind-key c new-window -c "#{pane_current_path}"


#2. Window navigation
#   > Se usara el keymapping por defecto de la tabla 'prefix':
#     'n' para next windows
#     'p' para previous windows
#     'l' para ir a las ultima ventana


#3. Windows swap

# Por defecto muestra un menu con opciones para trabajar con los paneles de ventana
# Se desabilitara. Si desea usar usar el boton primario y secundario
unbind-key >
unbind-key <

# Swap current window with the next one (->)
bind-key -r > swap-window -t +1 \; select-window -t +1

# Swap current window with the previous one (<-)
bind-key -r < swap-window -t -1 \; select-window -t -1



#-----------------------------------------------------------------------------------------
# Keybinding> TMUX Panel
#-----------------------------------------------------------------------------------------

#1. Split current windows

# Split current window horizontally
bind-key - split-window -v
#bind-key - split-window -v -c "#{pane_current_path}"
#unbind-key '"'
#bind-key '"' split-window -v -c "#{pane_current_path}"

# Split current window vertically
bind-key = split-window -h
#bind-key = split-window -h -c "#{pane_current_path}"
bind-key | split-window -h
#bind-key | split-window -h -c "#{pane_current_path}"
#unbind-key %
#bind-key %  split-window -h -c "#{pane_current_path}"


#2. Pane navigation (soporte a 'Vim Tmux Navigator')
#   > URL : https://github.com/christoomey/vim-tmux-navigator
#   > Se usa keymapping de la tabla 'root' (no requieren usar el prefijo)


# Lista de programas especiales: Programas en ejecucion en el panel actual y que deben procesaran las teclas 'Ctrl + h/j/k/l/\'
set-option -g @interactive_prgs 'view|l?n?vim?x?|fzf|ssh'

# Determinar si panel actual esta ejecutando un programa especial
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(#{@interactive_prgs})(diff)?$'"

# Si el panel actual esta ejecutando un programa especial, envia la tecla para que este programa lo procese.
# Caso contrario, sera tmux que procese la tecla (se movera entre paneles)
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'

# Si el panel tiene programa interactivo, envia la tecla al programa, caso contrario, navega al panel anterior
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'

if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

# Si el panel esta en modo copia siempre navega de panel
bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l


#3. Pane navigation (metodo alternativo)
#   > Si usa un tmux local y su panel actual ejecuta `ssh` la tecla lo enviara al `ssh`, por lo que no movera el panel.
#     En ese caso se recomienda usar el metodo alternativo.
#   > Se usara el keymapping por defecto de la tabla 'prefix': 'Up/Down/Left/Right'


#4. Pane swap
#   '{' para mover la la izquierda (<-)
#   '}' para mover la la derecha   (->)


#5. Pane resizing
#   > Adicional al keymapping por defecto de la tabla 'prefix':
#     'Ctrl + Up/Down/Left/Right' para inncrementar/disminuir en 1
#     'Alt  + Up/Down/Left/Right' para inncrementar/disminuir en 5
bind-key -r h resize-pane -L 1
bind-key -r j resize-pane -D 1
bind-key -r k resize-pane -U 1
bind-key -r l resize-pane -R 1




#-----------------------------------------------------------------------------------------
# Keybinding> Buffers
#-----------------------------------------------------------------------------------------

#bind-key b list-buffers     # list paste buffers
#bind-key p paste-buffer -p  # paste from the top paste buffer
#bind-key P choose-buffer    # choose which buffer to paste from



#-----------------------------------------------------------------------------------------
# Keybinding> Copy mode
#-----------------------------------------------------------------------------------------

#bind-key -T copy-mode-vi v send -X begin-selection
#bind-key -T copy-mode-vi C-v send -X rectangle-toggle
#bind-key -T copy-mode-vi Escape send -X cancel
#bind-key -T copy-mode-vi H send -X start-of-line
#bind-key -T copy-mode-vi L send -X end-of-line

#bind-key Enter copy-mode # enter copy mode
#bind-key -T copy-mode-vi y send -X copy-selection-and-cancel



#-----------------------------------------------------------------------------------------
# Personalización usadas por el usuario
#-----------------------------------------------------------------------------------------

# El script incluye (notese 'source-file' no soporta expansion de format):
# > Opciones tmux
#   > Usadas para 'Keybinding usando tools externos'.
# > Variables de entorno usadas solo por el script de inicializacion.
#   > Usados para generar el 'status line' al estilo de 'oh-my-tmux'.
run-shell '"$TMUX_PROGRAM" source-file "$TMUX_CUSTOM_CONF"'



#-----------------------------------------------------------------------------------------
# Keybinding> Usando tools externas
#-----------------------------------------------------------------------------------------

#1. Usar 'sesh' y 'fzf' para gestioner las sesiones TMUX
bind-key S run-shell "sesh connect \"$(
  sesh list --icons | fzf --tmux center,99%,70% \
    --no-sort --ansi --prompt '⚡Session + Zoxide> ' \
    --header '(^a) all (^t) session (^i) configs (^x) zoxide (^d) kill session (^g) git subfolder (^f) subfolder' \
    --bind 'tab:down,btab:up' \
    --bind 'ctrl-a:change-prompt(⚡Session + Zoxide> )+reload(sesh list --icons)' \
    --bind 'ctrl-t:change-prompt(🪟 Active sessions> )+reload(sesh list -t --icons)' \
    --bind 'ctrl-i:change-prompt(⚙️ Configured sessions> )+reload(sesh list -c --icons)' \
    --bind 'ctrl-x:change-prompt(📁 Zoxide folder> )+reload(sesh list -z --icons)' \
    --bind 'ctrl-d:execute(tmux kill-session -t {2..})+change-prompt(⚡Session + Zoxide> )+reload(sesh list --icons)' \
	--bind 'ctrl-f:change-prompt(🔎 Work folder> )' --bind 'ctrl-f:+reload:bash $MY_REPO_PATH/shell/bash/bin/fzf/fun_general.bash list_work_folder ~/code 1 7' \
	--bind 'ctrl-g:change-prompt(🔎 Git folder> )' --bind 'ctrl-g:+reload:bash $MY_REPO_PATH/shell/bash/bin/fzf/fun_general.bash list_git_folder ~/code 1 7' \
    --preview-window 'right:50%' \
    --preview 'bash $MY_REPO_PATH/shell/bash/bin/fzf/fun_general.bash show_sesh_preview {}'
)\""

#2. Soporte a 'Tmux Fingers'
#   URL: https://github.com/Morantron/tmux-fingers
#   > Logica de inicialización
#   > Por defecto fefine los siguientes keybinding:
#     > 'prefix, F' : ingresar al 'default fingers mode'
#     > 'prefix, J' : ingresar al 'jump fingers mode'
if-shell -b 'tmux-fingers version > /dev/null 2>&1' 'run-shell "tmux-fingers load-config"'

#3. Soporte 'Tmux Thumbs'
#   URL: https://github.com/fcsonline/tmux-thumbs
#bind-key F run-shell -b "bash '#{TMUX_SHELL_PATH}/fun_general.bash' start_tmux_thumbs"

#4. Integracion con 'Facebook PathPicker'
if-shell -b 'fpp --version > /dev/null 2>&1' \
   "bind-key P run-shell \"bash '#{TMUX_SHELL_PATH}/fun_general.bash' fpp '#{pane_id}' '#{pane_current_path}'\""

#5. Integracion con 'UrlScan'
if-shell -b 'command -v urlscan > /dev/null 2>&1' \
   "bind-key U run-shell \"bash '#{TMUX_SHELL_PATH}/fun_general.bash' urlscan '#{pane_id}' '#{@urlscan_options}'\"" \
   "bind-key U run-shell \"bash '#{TMUX_SHELL_PATH}/fun_general.bash' urlview '#{pane_id}'\""

#6. Buscador de URL con FZF
bind-key O run-shell "bash '#{TMUX_SHELL_PATH}/fun_general.bash' init_url '#{@url_open_cmd}' '#{@url_history_limit}' '#{@url_extra_filter}'"

#7. Herramientas que usan un popup no integrado

bind G display-popup -d "#{pane_current_path}" -b none -w 100% -h 80% -E "lazygit"

bind X display-popup -d "#{pane_current_path}" -b none -w 100% -h 80% -E "yazi"

bind T display-popup -d "#{pane_current_path}" -w 100% -h 80% -E "bash"



#-----------------------------------------------------------------------------------------
# Status line
#-----------------------------------------------------------------------------------------

# Status line creado por 'Oh-my-tmux'
run-shell 'sh "$TMUX_SHELL_PATH/fun_ohmytmux.sh" setup_statusline'

# Only for debugging
#display-message 'Executing _apply_24b'
#run-shell 'sh "$TMUX_SHELL_PATH/fun_ohmytmux.sh" _apply_24b'
#display-message 'Executing _apply_theme'
#run-shell 'sh "$TMUX_SHELL_PATH/fun_ohmytmux.sh" _apply_theme'
#display-message 'TERM: #{TERM}, TERM_PROGRAM: #{TERM_PROGRAM}, TERM_PROGRAM_VERSION: #{TERM_PROGRAM_VERSION}'
