#
# Info de tmux:
#  > Changelog: https://github.com/tmux/tmux/blob/master/CHANGES
#  > Wiki     : https://github.com/tmux/tmux/wiki
#  > OSC 52   : Soporte desde la variosn 2.5
# Version modificada de 'oh-my-tmux' creado/liderado por Gregory Pakosz (@gpakosz).
#  > URL      : https://github.com/gpakosz/.tmux
#  > Tmux >= 2.6

##########################################################################################
# Variables de Entorno
##########################################################################################
# Consideraciones:
#  > Se usan directivas condicionales para se ejecute una solo vez (cuando se crea el servidor tmux y no cuando se recargar el
#    el script ('source-file').
#  > Las variable de entorno 'TERM_PROGRAM' y 'TERM_PROGRAM_VERSION', indica un nombre (amigable, no necesariamente el nombre
#    del comando) y la version del emulador de terminal usada. Tmux, desde la version 3.2, despues de iniciar el servidor tmux
#    es definido/modificado, es decir, cuando se ejecute este script por primera vez, los valores de la variables es la terminal
#    usada para iniciar tmux y aun no es valor cambiado por tmux (valor 'tmux' y la version de tmux).
#

#1. Variables de entorno definidas por el usuario

# Ruta del repositorio GIT (donde se almacena los script para el setup y la plantilla personalizado de archivo de configuracion)
%if #{==:#{MY_REPO_PATH},}
  set-environment -g MY_REPO_PATH "$HOME/.files"
%endif


#2. Variables de entorno calculado usando la informacion de inicio del servidor Tmux

#display-message 'TERM: #{TERM}, TERM_PROGRAM: #{TERM_PROGRAM}, TERM_PROGRAM_VERSION: #{TERM_PROGRAM_VERSION}'

# Nombre del programa tmux. Ejemplo: '/usr/bin/tmux'
%if #{==:#{TMUX_PROGRAM},}
  run-shell 'TMUX_PROGRAM="$(LSOF=$(PATH="$PATH:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin" command -v lsof); $LSOF -b -w -a -d txt -p #{pid} -Fn 2>/dev/null | perl -n -e "if (s/^n((?:.(?!dylib$|so$))+)$/\1/g && s/(?:\s+\([^\s]+?\))?$//g) { print; exit } } exit 1; {" || readlink "/proc/#{pid}/exe" 2>/dev/null)"; {[ -f "$TMUX_PROGRAM" ] && [ -x "$TMUX_PROGRAM" ]} || TMUX_PROGRAM="$(command -v tmux || printf tmux)"; "$TMUX_PROGRAM" -S #{socket_path} set-environment -g TMUX_PROGRAM "$TMUX_PROGRAM"'
%endif

# Ruta de socket IPC del servidor tmux. Ejemplo: '/tmp/tmux-1000/default'
%if #{==:#{TMUX_SOCKET},}
  run-shell '"$TMUX_PROGRAM" -S #{socket_path} set-environment -g TMUX_SOCKET "#{socket_path}"'
%endif

# La ruta del archivo de configuracion principal
%if #{==:#{TMUX_CONF},}
  run-shell '"$TMUX_PROGRAM" set-environment -g TMUX_CONF $(file="#{current_file}"; case "$file" in "") printf "%s" "$MY_REPO_PATH/etc/tmux/tmux_local.conf";; /*) printf "%s" "$file";; *)  realpath "$file";; esac)'
%endif

# Version de TMUX entero y comparable, por ejemplo '3.2a' convierte a 320, '2.56' convierte a 256, '2.506' convierte a 250
#  - Opcion 'version' se define en la version 2.5
%if #{==:#{TMUX_VERSION},}
  run-shell '"$TMUX_PROGRAM" set-environment -g TMUX_VERSION $(echo "#{version}" | sed -En "s/^[^0-9]*([.0-9]+).*/\1/p" | awk "{ print int(\$1*100) }")'
%endif

#3. Variables de entorno adicionales

# Ruta donde estan los script requeridos para el setup
%if #{==:#{TMUX_SHELL_PATH},}
  run-shell '"$TMUX_PROGRAM" set-environment -g TMUX_SHELL_PATH "$MY_REPO_PATH/shell/bash/bin/tmux"'
%endif

# Ruta del archivo de configuracion personalizable
%if #{==:#{TMUX_CUSTOM_CONF},}
  run-shell '"$TMUX_PROGRAM" set-environment -g TMUX_CUSTOM_CONF $(if [ -f "${XDG_CONFIG_HOME:-$HOME/.config}/tmux/tmux_custom.conf" ]; then printf "%s" "${XDG_CONFIG_HOME:-$HOME/.config}/tmux/tmux_custom.conf"; else printf "%s" "$MY_REPO_PATH/etc/tmux/tmux_custom_template_local.conf"; fi)'
%endif


# Variables de entorno con las rutas de script requeridos por 'ohmytmux'
# Por ahora aun esta variable no se calculado internamente (en el script usando la variable 'TMUX_SHELL_PATH'),
# la logica del script 'fun_ohmytmux.sh' depende de estas variables.
%if #{==:#{TMUX_SHELL_OHMYTMUX},}
  run-shell '"$TMUX_PROGRAM" set-environment -g TMUX_SHELL_OHMYTMUX "$TMUX_SHELL_PATH/fun_ohmytmux.sh"'
%endif

%if #{==:#{TMUX_SHELL_CUSTOM_STATUSBAR},}
  run-shell '"$TMUX_PROGRAM" set-environment -g TMUX_SHELL_CUSTOM_STATUSBAR "$TMUX_SHELL_PATH/fun_custom_statusbar.sh"'
%endif



##########################################################################################
# Pseudo-terminal creado por tmux
##########################################################################################

set-option -g default-terminal "tmux-256color"
#set -g default-terminal "${TERM}"
#set-option -g default-terminal "screen-256color"

# Capacidades adicionales a la pseudo-terminal> undercurl support
set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'

# Capacidades adicionales a la pseudo-terminal> underscore colours - needs tmux-3.0
set -as terminal-overrides ',*:Setulc=\E[58::2::::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'



##########################################################################################
# Opciones Generales
##########################################################################################

set-option -w -g xterm-keys on
set-option -s escape-time 10                     # faster command sequences
set-option -sg repeat-time 600                   # increase repeat timeout
set-option -s focus-events on

# No usar el 2do prijo, este se reservara para usarlo en 'tmux inside tmux'
#set-option -g prefix2 C-a
#set-option -g prefix2 None

# No destruye la sesion actual si se elimina todos las ventanas y peneles de este mientras existe otras sesiones.
set -g detach-on-destroy off

set-option -q -g status-utf8 on                  # expect UTF-8 (tmux < 2.2)
set-option -w -q -g utf8 on

set-option -g history-limit 10000                # boost history


##########################################################################################
# Opciones de Display
##########################################################################################

set-option -g base-index 1           # start windows numbering at 1
set-option -w -g pane-base-index 1     # make pane numbering consistent with windows

set-option -w -g automatic-rename on   # rename window to reflect current program
set-option -g renumber-windows on    # renumber windows when a window is closed

set-option -g set-titles on          # set terminal title

set-option -g display-panes-time 800 # slightly longer pane indicators display time
set-option -g display-time 1000      # slightly longer status messages display time

set-option -g status-interval 10     # redraw status line every 10 seconds

# activity
set-option -g monitor-activity on
set-option -g visual-activity off


##########################################################################################
# Keybinding> General
##########################################################################################

# Si se presiona 2 veces 'CTRL + a', se envia 1 'CTRL + a' al panel activo
bind-key C-a send-prefix -2

# clear both screen and history
bind-key -n C-l send-keys C-l \; run-shell 'sleep 0.2' \; clear-history

# reload configuration
bind-key r run-shell '"$TMUX_PROGRAM" ${TMUX_SOCKET:+-S "$TMUX_SOCKET"} source "$TMUX_CONF"' \; display "#{TMUX_CONF} sourced"

# maximize current pane
bind-key + run-shell "bash '#{TMUX_SHELL_PATH}/fun_actions.bash' maximize_pane '#{session_name}' '#D'"


##########################################################################################
# Keybinding> Navegavion
##########################################################################################

#1. window navigation
unbind-key n
unbind-key p

bind-key -r C-h previous-window # select previous window
bind-key -r C-l next-window     # select next window
bind-key Tab last-window        # move to last active window

#2. Split current windows

# Split current window horizontally
bind-key - split-window -v
# Split current window vertically
bind-key = split-window -h
bind-key | split-window -h

#3. Moverse entre paneles (soporte a 'Vim Tmux Navigator')
#   URL : https://github.com/christoomey/vim-tmux-navigator

# Lista de programas especiales: Programas en ejecucion en el panel actual y que deben procesaran las teclas 'Ctrl + h/j/k/l/\'
set-option -g @interactive_prgs 'view|l?n?vim?x?|fzf|ssh'

# Determinar si panel actual esta ejecutando un programa especial
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(#{@interactive_prgs})(diff)?$'"

# Si el panel actual esta ejecutando un programa especial, envia la tecla para que este programa lo procese.
# Caso contrario, sera tmux que procese la tecla (se movera entre paneles)
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'

# Si el panel tiene programa interactivo, envia la tecla al programa, caso contrario, navega al panel anterior
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'

if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

# Si el panel esta en modo copia siempre navega de panel
bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

#4. Moverse entre paneles (metodo alternativo)
#   > Si usa un tmux local y su panel actual ejecuta `ssh` la tecla lo enviara al `ssh`, por lo que no movera el panel.
#     En ese caso se recomienda usar el metodo alternativo.
bind -r h select-pane -L  # move left
bind -r j select-pane -D  # move down
bind -r k select-pane -U  # move up
bind -r l select-pane -R  # move right

#5. Pane swap
bind-key > swap-pane -D       # swap current pane with the next one
bind-key < swap-pane -U       # swap current pane with the previous one

#6. Pane resizing
bind-key -r h resize-pane -L 1
bind-key -r j resize-pane -D 1
bind-key -r k resize-pane -U 1
bind-key -r l resize-pane -R 1

#7. Toggle mouse
bind-key m run-shell "bash '#{TMUX_SHELL_PATH}/fun_actions.bash' _toggle_mouse"


##########################################################################################
# Keybinding> TMUX Session
##########################################################################################

# create session
bind-key C-c new-session

# find session
bind-key C-f command-prompt -p find-session 'switch-client -t %%'

# session navigation
bind-key BTab switch-client -l  # move to last session

# TODO: Homologar con la existente funcion t de profile
bind-key T run-shell "sesh connect \"$(
  sesh list --icons | fzf --tmux center,99%,70% \
    --no-sort --ansi --prompt '⚡Session + Zoxide> ' \
    --header '(^a) all (^t) session (^i) configs (^x) zoxide (^d) kill session (^g) git subfolder (^f) subfolder' \
    --bind 'tab:down,btab:up' \
    --bind 'ctrl-a:change-prompt(⚡Session + Zoxide> )+reload(sesh list --icons)' \
    --bind 'ctrl-t:change-prompt(🪟 Active sessions> )+reload(sesh list -t --icons)' \
    --bind 'ctrl-i:change-prompt(⚙️ Configured sessions> )+reload(sesh list -c --icons)' \
    --bind 'ctrl-x:change-prompt(📁 Zoxide folder> )+reload(sesh list -z --icons)' \
    --bind 'ctrl-d:execute(tmux kill-session -t {2..})+change-prompt(⚡Session + Zoxide> )+reload(sesh list --icons)' \
	--bind 'ctrl-f:change-prompt(🔎 Work folder> )' --bind 'ctrl-f:+reload:bash $MY_REPO_PATH/shell/bash/bin/fzf/fun_general.bash list_work_folder ~/code 1 7' \
	--bind 'ctrl-g:change-prompt(🔎 Git folder> )' --bind 'ctrl-g:+reload:bash $MY_REPO_PATH/shell/bash/bin/fzf/fun_general.bash list_git_folder ~/code 1 7' \
    --preview-window 'right:50%' \
    --preview 'bash $MY_REPO_PATH/shell/bash/bin/fzf/fun_general.bash show_sesh_preview {}'
)\""


##########################################################################################
# Keybinding> Buffers
##########################################################################################

bind-key b list-buffers     # list paste buffers
bind-key p paste-buffer -p  # paste from the top paste buffer
bind-key P choose-buffer    # choose which buffer to paste from


##########################################################################################
# Keybinding> Copy mode
##########################################################################################


bind-key -T copy-mode-vi v send -X begin-selection
bind-key -T copy-mode-vi C-v send -X rectangle-toggle
bind-key -T copy-mode-vi Escape send -X cancel
bind-key -T copy-mode-vi H send -X start-of-line
bind-key -T copy-mode-vi L send -X end-of-line

#bind-key Enter copy-mode # enter copy mode
#bind-key -T copy-mode-vi y send -X copy-selection-and-cancel


##########################################################################################
# Write/Send text to Clipboard> OSC 52 or Keybinding with external commands
##########################################################################################
# Obtenido de 'https://github.com/tmux/tmux/wiki/Clipboard'
#
# La terminal ofrece mecanismos nativos de lectura/escritura de clipboard desde el prompt de la terminal.
#  > Permite que el usuario desde el promp de la terminal, puede acceder a la terminal usando keybinding como "Ctrl+C" y "Ctrl+V".
#  > La terminal restringe que los comando que se ejecutan la terminal accedan al estos API de la terminal para escritura de la terminal,
#  > Las terminales modernas ofrecen un mecanismo estándar (OSC 52) para que los comando permiten escribir en el clipboard donde esta la terminal.
#    En OSC  52, los comandos envíen texto y soliciten a la terminal que escriban al clipboard.
#
# Las terminales no ofrecen un mecanismo estándar para que los comando permiten leer el clipboard que tiene acceso la terminal.
# Los comando en ejecución interactiva de una terminal debe implementar sus propios mecanismos de lectura y escritura.
#

# La variable de entorno 'TMUX_SET_CLIPBOARD' calculado automaticamente (solo una vez) por este script y sus posibles valores son:
#   > No se ha podido establecer un mecanismo del clipboard (usar comandos externo, pero no estan instalados).
#   0 > Usa 'set-clipboard off' (desactivar el escribir al clipboard).
#   1 > Usa 'set-clipboard on' y usar el OSC52 para escribir en el clipboard.
#   2 > Usa 'set-clipboard external' y usar comandos externos para escribir en el clipboard.
%if #{==:#{TMUX_SET_CLIPBOARD},}

    # Parametro de entrada:
    # 1> La variable el key que se ascociará al copiado del buffer en modo copia (accion 'copy-pipe-and-cancel' en el modo 'copy-mode-vi')
    # 2> La variable de entorno 'SET_CLIPBOARD' establecida por el USUARIO, y pueden tener los siguientes valores:
    #       > Determinar automaticamente la opcion correcta (si la terminal soporta OSC lo habilta, si no usa comandos externos).
    #     0 > Usa 'set-clipboard off' (desactivar el escribir al clipboard).
    #     1 > Usa 'set-clipboard on' y usar el OSC52 para escribir en el clipboard.
    #     2 > Usa 'set-clipboard external' y usar comandos externos para escribir en el clipboard.
    #   Puede usarlo, la cuando crea la primera session:
    #   Ejemplo 1:
    #     SET_CLIPBOARD=1 tmux new-session -s main -n w01
    #   Ejemplo 2:
    #     export SET_CLIPBOARD=1
    #     tmux new-session -s main -n w01
    #
    run-shell 'bash "$TMUX_SHELL_PATH/fun_general.bash" setting_clipboard y #{SET_CLIPBOARD}'

%endif

##########################################################################################
# Custom Settings> Custom options, Enviroment variables for setup shell
##########################################################################################

# 'source-file' no soporta expansion de format
run-shell '"$TMUX_PROGRAM" source-file "$TMUX_CUSTOM_CONF"'


##########################################################################################
# Keybinding> Custom
##########################################################################################

#1. Integracion con 'Facebook PathPicker'
if-shell -b 'fpp --version > /dev/null 2>&1' \
   "bind-key Q run-shell \"bash '#{TMUX_SHELL_PATH}/fun_general.bash' fpp '#{pane_id}' '#{pane_current_path}'\""

#2. Integracion con 'UrlScan'
if-shell -b 'command -v urlscan > /dev/null 2>&1' \
   "bind-key U run-shell \"bash '#{TMUX_SHELL_PATH}/fun_general.bash' urlscan '#{pane_id}' '#{@urlscan_options}'\"" \
   "bind-key U run-shell \"bash '#{TMUX_SHELL_PATH}/fun_general.bash' urlview '#{pane_id}'\""


#3. Buscador de URL con FZF
bind-key O run-shell "bash '#{TMUX_SHELL_PATH}/fun_general.bash' init_url '#{@url_open_cmd}' '#{@url_history_limit}' '#{@url_extra_filter}'"

#4. Soporte a 'Tmux Fingers' (https://github.com/Morantron/tmux-fingers)
#%if #{==:#{@use_tmux_thumbs},true}

   #bind-key F run-shell -b "bash '#{TMUX_SHELL_PATH}/fun_general.bash' start_tmux_thumbs"

#5. Soporte 'Tmux Thumbs' (https://github.com/fcsonline/tmux-thumbs)
#%else

    #   > Logica de inicialización
    #   > Por defecto fefine los siguientes keybinding:
    #     > 'prefix, F' : ingresar al 'defult fingers mode'
    #     > 'prefix, J' : ingresar al 'jump fingers mode'
    if-shell -b 'tmux-fingers version > /dev/null 2>&1' 'run-shell "tmux-fingers load-config"'

#%endif


##########################################################################################
# Logica de presentacion
##########################################################################################

# Logica de presentacion de 'Oh-my-tmux'
run-shell 'sh "$TMUX_SHELL_PATH/fun_ohmytmux.sh" _apply_configuration'

#Only for debugging
#display-message 'Executing _apply_256color'
#run-shell 'sh "$TMUX_SHELL_PATH/fun_ohmytmux.sh" _apply_256color'
#display-message 'Executing _apply_24b'
#run-shell 'sh "$TMUX_SHELL_PATH/fun_ohmytmux.sh" _apply_24b'
#display-message 'Executing _apply_theme'
#run-shell 'sh "$TMUX_SHELL_PATH/fun_ohmytmux.sh" _apply_theme'
#display-message 'Executing _apply_bindings'
#run-shell 'sh "$TMUX_SHELL_PATH/fun_ohmytmux.sh" _apply_bindings'

#display-message 'Executing _apply_plugins'
#run-shell 'sh "$TMUX_SHELL_PATH/fun_ohmytmux.sh" _apply_plugins'
#display-message 'Executing _apply_important'
#run-shell 'sh "$TMUX_SHELL_PATH/fun_ohmytmux.sh" _apply_important'

#display-message 'TERM: #{TERM}, TERM_PROGRAM: #{TERM_PROGRAM}, TERM_PROGRAM_VERSION: #{TERM_PROGRAM_VERSION}'
