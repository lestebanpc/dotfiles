#
# OpenSSL configuration file 
# Notas:
#  > La version es una modificacion de "openssl.cnf" (ubicado en 'openssl version -d')
#  > Usando por el subcomando a usar: 'openssl ca ...'
#  > Para usar openssl en modo CA, require definir la ruta donde estan los archivo del CA.
#    Por ejemplo, si desea firmar/crear certificado con el CA root CN='quyllur.home' :
#      export CA_PATH=~/userkeys/tls/ca/quyllur.home
#    Por ejemplo, si desea firmar/crear certificado con el CA Intermedio CN='quyllur.pe.home':
#      export CA_PATH=~/userkeys/tls/ca/quyllur.pe.home
#


# This definition stops the following lines choking if HOME isn't defined.
HOME            = .

# Include other files from the main configuration file using the .include directive.
#include filename

# To use this configuration file with the "-extfile" option of the "openssl x509" utility, 
# name here the section containing the X.509v3 extensions to use:
#extensions     =

# Extra OBJECT IDENTIFIER info:
#oid_file       = $ENV::HOME/.oid
#oid_section     = new_oids

#[ new_oids ]
# We can add new OIDs in here for use by 'ca', 'req' and 'ts'.
# testoid1=1.2.3.4
# testoid2=${testoid1}.5.6   # Or use config file substitution like this:

#----------------------------------------------------------------------------------------------------------------
# Seccion CA: ca
#----------------------------------------------------------------------------------------------------------------
#
# Seccion reservada 'ca' usado cuando se usa 'openssl ca' ('modo ca' de OpenSSL). Permitiendo:
#   > Convierte en un CA Firmante que permite crear certificados firmados por este.
#   > Usando 'openssl ca -new' puede crear el certificados de 'CA root' (certificado autoafirmados).
#

[ ca ]
default_ca      = CA_default # The default ca section

[ CA_default ]
# Directory de apoyo del CA
dir             = $ENV::CA_PATH # Where everything is kept
certs           = $dir/certs # Where the issued certs are kept
crl_dir         = $dir/crl # Where the issued crl are kept
new_certs_dir   = $dir/newcerts # default place for new certs.

# Archivos de apoyo del CA
database        = $dir/index.txt # database index file.
serial          = $dir/serial # The current serial number

# Clave privada y el certificado del CA usados para crear certificado firmados
private_key     = $dir/private/cakey.pem # The private key
certificate     = $dir/cacert.pem # The CA certificate

# Opciones adicionales:
default_days        = 365 # how long to certify for
default_md          = sha256 # 'default' use public key default MD
preserve            = no # keep passed DN ordering
#copy_extensions     = copy # Valores: "none" (valor por defecto), "copy", "copyall"
#unique_subject      = no # Set to 'no' to allow creation of several certs with same subject.

# Opciones de CRL (Certificate Revocation Lists)
crlnumber           = $dir/crlnumber # the current crl number. must be commented out to leave a V1 CRL
crl                 = $dir/crl.pem # The current CRL
default_crl_days    = 30 # how long before next CRL

# Politica por defecto usado por el CA firmante
policy              = policy_match

# Extensiones adicionados a los CRL
#crl_extensions      = crl_ext

# Extensiones adicionado al certificado firmado a crear
x509_extensions     = defaul_ext # The extensions to add to the cert


#----------------------------------------------------------------------------------------------------------------
# Seccion de politicas de una CA: ca.default_ca.policy
#----------------------------------------------------------------------------------------------------------------

# The root CA should only sign intermediate certificates that match.
[ policy_match ]
countryName             = match
stateOrProvinceName     = match
organizationName        = match
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional

# For the 'anything' policy At this point in time, you must list all acceptable 'object' types.
# Allow the intermediate CA to sign a more diverse range of certificates.
[ policy_anything ]
countryName             = optional
stateOrProvinceName     = optional
localityName            = optional
organizationName        = optional
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional


#----------------------------------------------------------------------------------------------------------------
# Seccion de extension x509 por defecto para crear certificados
#----------------------------------------------------------------------------------------------------------------

#
# Extension para certificados firmados para un Usuario TLS (Genérico)
# Usado por la seccion 'ca' definida por este archivo
#
[ default_ext ]
basicConstraints = CA:FALSE
#keyUsage = nonRepudiation, digitalSignature, keyEncipherment
#extendedKeyUsage = clientAuth, emailProtection, timeStamping
#nsCertType = client, email, objsign
nsComment = "OpenSSL Generated Certificate"
subjectKeyIdentifier =hash
authorityKeyIdentifier =keyid,issuer
#subjectAltName=
#issuerAltName=


#----------------------------------------------------------------------------------------------------------------
# Seccion de extension x509 alternativos que se pueden usar para crear certificados 
#----------------------------------------------------------------------------------------------------------------
#
# Documentación: "man x509v3_config"
# Si desea usar alguna de las extensiones definidas por este archivo para crear sus certificados 
# debera establecer '-extensions <seccion-name>'
#

#
# Extension para certificados firmado para un CA (Intermedio)
#
[ v3_intermediate_ca ]
basicConstraints = critical, CA:true, pathlen:0 # 'pathlen:0' indica que no puede haber mas CAs debajo de este.
keyUsage = critical, cRLSign, keyCertSign, digitalSignature
subjectKeyIdentifier=hash
authorityKeyIdentifier=keyid:always,issuer
#nsCertType = sslCA, emailCA # Uso que se dara al certificado
#subjectAltName=
#issuerAltName=
#obj=DER:02:03 # DER hex encoding of an extension: Where 'obj' is a standard or added object
#basicConstraints= critical, DER:30:03:01:01:FF # You can even override a supported extension

#
# Extension para certificados firmados para un Usuario: Cliente TLS
#
[ client_cert ]
basicConstraints = CA:FALSE
keyUsage = critical, nonRepudiation, digitalSignature, keyEncipherment
extendedKeyUsage = clientAuth, emailProtection
nsCertType = client, email
nsComment = "OpenSSL Generated Client Certificate"
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer
#subjectAltName=

#
# Extension para certificados firmados para un Usuario: Servidor TLS
#
[ server_cert ]
basicConstraints = CA:FALSE
keyUsage = critical, nonRepudiation, digitalSignature, keyEncipherment
extendedKeyUsage = serverAuth
nsCertType = server
nsComment = "OpenSSL Generated Server Certificate"
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer:always
#subjectAltName=



#----------------------------------------------------------------------------------------------------------------
# Seccion de extension, alternativos y non-x509, que se pueden usar
#----------------------------------------------------------------------------------------------------------------
#

#
# Extensions para las CRL creadas.
#
[ crl_ext ]
authorityKeyIdentifier=keyid:always
#issuerAltName=

#
# Extensions para las OCP creadas.
#
[ ocsp_ext ]
basicConstraints       = CA:FALSE
subjectKeyIdentifier   = hash
authorityKeyIdentifier = keyid,issuer
keyUsage               = critical, digitalSignature
extendedKeyUsage       = critical, OCSPSigning

