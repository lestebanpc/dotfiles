# Source: 'oh-my-tmux', creado por Gregory Pakosz (@gpakosz). 
# URL   : https://github.com/gpakosz/.tmux 
# Se modifica para tener shell en otro archivos y no dentro de los archivos de configuracion


# -- Variables de Entorno ------------------------------------------------------

# Si no esta definido las variable de entorno, definirlas
%if #{==:#{TMUX_PROGRAM},}
  run-shell 'TMUX_PROGRAM="$(LSOF=$(PATH="$PATH:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin" command -v lsof); $LSOF -b -w -a -d txt -p #{pid} -Fn 2>/dev/null | perl -n -e "if (s/^n((?:.(?!dylib$|so$))+)$/\1/g && s/(?:\s+\([^\s]+?\))?$//g) { print; exit } } exit 1; {" || readlink "/proc/#{pid}/exe" 2>/dev/null)"; {[ -f "$TMUX_PROGRAM" ] && [ -x "$TMUX_PROGRAM" ]} || TMUX_PROGRAM="$(command -v tmux || printf tmux)"; "$TMUX_PROGRAM" -S #{socket_path} set-environment -g TMUX_PROGRAM "$TMUX_PROGRAM"'
%endif
%if #{==:#{TMUX_SOCKET},}
  run-shell '"$TMUX_PROGRAM" -S #{socket_path} set-environment -g TMUX_SOCKET "#{socket_path}"'
%endif
%if #{==:#{TMUX_CONF},}
  run-shell '"$TMUX_PROGRAM" set-environment -g TMUX_CONF $(for conf in "$HOME/.tmux.conf" "$XDG_CONFIG_HOME/tmux/tmux.conf" "$HOME/.config/tmux/tmux.conf"; do [ -f "$conf" ] && printf "%s" "$conf" && break; done)'
%endif
%if #{==:#{TMUX_CONF_PATH},} 
  run-shell '"$TMUX_PROGRAM" set-environment -g TMUX_CONF_PATH "$HOME/.files/tmux"' 
%endif 
%if #{==:#{TMUX_SHELL_PATH},}
  run-shell '"$TMUX_PROGRAM" set-environment -g TMUX_SHELL_PATH "$HOME/.files/shell/bash/bin/tmux"' 
%endif

#Temporal: Variables de entorno requieridos solo para el funcionamiento del scrip 'fun_ohmytmux.sh'
run-shell '"$TMUX_PROGRAM" set-environment -g TMUX_CONF_LOCAL "$TMUX_CONF_PATH/tmux.local.conf"'
run-shell '"$TMUX_PROGRAM" set-environment -g TMUX_FUNC "$TMUX_SHELL_PATH/fun_ohmytmux.sh"'
run-shell '"$TMUX_PROGRAM" set-environment -g TMUX_FUNC_LOCAL "$TMUX_SHELL_PATH/fun_ohmytmux_local.sh"'


# -- Opciones Generales --------------------------------------------------------

set -g default-terminal "tmux-256color"
#set -g default-terminal "screen-256color"

setw -g xterm-keys on
set -s escape-time 10                     # faster command sequences
set -sg repeat-time 600                   # increase repeat timeout
set -s focus-events on

set -g prefix2 C-a                        # GNU-Screen compatible prefix

set -q -g status-utf8 on                  # expect UTF-8 (tmux < 2.2)
setw -q -g utf8 on

set -g history-limit 5000                 # boost history


# -- Opciones de Display -------------------------------------------------------

set -g base-index 1           # start windows numbering at 1
setw -g pane-base-index 1     # make pane numbering consistent with windows

setw -g automatic-rename on   # rename window to reflect current program
set -g renumber-windows on    # renumber windows when a window is closed

set -g set-titles on          # set terminal title

set -g display-panes-time 800 # slightly longer pane indicators display time
set -g display-time 1000      # slightly longer status messages display time

set -g status-interval 10     # redraw status line every 10 seconds

# activity
set -g monitor-activity on
set -g visual-activity off


# -- Keybinding General --------------------------------------------------------

# Si se presiona 2 veces 'CTRL + a', se envia 1 'CTRL + a' al panel activo
bind-key C-a send-prefix -2

# clear both screen and history
bind-key -n C-l send-keys C-l \; run-shell 'sleep 0.2' \; clear-history

# edit configuration
bind-key e new-window -n "#{TMUX_CONF_PATH}/tmux.local.conf" -e EDITOR="$EDITOR" sh -c 'case "${EDITOR:-vim}" in *vim*) ${EDITOR:-vim} -c ":set syntax=tmux" "$TMUX_CONF_PATH/tmux.local.conf";; *) $EDITOR "$TMUX_CONF_PATH/tmux.local.conf";; esac && "$TMUX_PROGRAM" ${TMUX_SOCKET:+-S "$TMUX_SOCKET"} source "$TMUX_CONF" \; display "$TMUX_CONF_PATH/tmux.local.conf sourced"'

# reload configuration
bind-key r run-shell '"$TMUX_PROGRAM" ${TMUX_SOCKET:+-S "$TMUX_SOCKET"} source "$TMUX_CONF"' \; display "#{TMUX_CONF} sourced"

# maximize current pane
bind-key + run-shell "sh '#{TMUX_SHELL_PATH}/fun_ohmytmux.sh' _maximize_pane '#{session_name}' '#D'"


# -- Keybinding de Navegavion --------------------------------------------------

# create session
bind-key C-c new-session

# find session
bind-key C-f command-prompt -p find-session 'switch-client -t %%'

# session navigation
bind-key BTab switch-client -l  # move to last session

# split current window horizontally
bind-key - split-window -v
# split current window vertically
bind-key = split-window -h
#bind-key _ split-window -h

# pane navigation (parte de este se usara a lo especificado por 'vim tmux navigation')
#bind-key -r h select-pane -L  # move left
#bind-key -r j select-pane -D  # move down
#bind-key -r k select-pane -U  # move up
#bind-key -r l select-pane -R  # move right
bind-key > swap-pane -D       # swap current pane with the next one
bind-key < swap-pane -U       # swap current pane with the previous one

# pane resizing
#bind-key -r H resize-pane -L 2
#bind-key -r J resize-pane -D 2
#bind-key -r K resize-pane -U 2
#bind-key -r L resize-pane -R 2
bind-key -r h resize-pane -L 1
bind-key -r j resize-pane -D 1
bind-key -r k resize-pane -U 1
bind-key -r l resize-pane -R 1

# window navigation
unbind-key n
unbind-key p
bind-key -r C-h previous-window # select previous window
bind-key -r C-l next-window     # select next window
bind-key Tab last-window        # move to last active window

# toggle mouse
bind-key m run-shell "sh '#{TMUX_SHELL_PATH}/fun_ohmytmux.sh' _toggle_mouse"




# -- copy mode -----------------------------------------------------------------

bind-key Enter copy-mode # enter copy mode

bind-key -T copy-mode-vi v send -X begin-selection
bind-key -T copy-mode-vi C-v send -X rectangle-toggle
bind-key -T copy-mode-vi y send -X copy-selection-and-cancel
bind-key -T copy-mode-vi Escape send -X cancel
bind-key -T copy-mode-vi H send -X start-of-line
bind-key -T copy-mode-vi L send -X end-of-line

# copy to X11 clipboard
if-shell -b 'command -v xsel > /dev/null 2>&1' \
   'bind y run -b "\"\$TMUX_PROGRAM\" \${TMUX_SOCKET:+-S \"\$TMUX_SOCKET\"} save-buffer - | xsel -i -b"'

if-shell -b '! command -v xsel > /dev/null 2>&1 && command -v xclip > /dev/null 2>&1' \
   'bind y run -b "\"\$TMUX_PROGRAM\" \${TMUX_SOCKET:+-S \"\$TMUX_SOCKET\"} save-buffer - | xclip -i -selection clipboard >/dev/null 2>&1"'

# copy to Wayland clipboard
if-shell -b '[ "$XDG_SESSION_TYPE" = "wayland" ] && command -v wl-copy > /dev/null 2>&1' \
   'bind y run -b "\"\$TMUX_PROGRAM\" \${TMUX_SOCKET:+-S \"\$TMUX_SOCKET\"} save-buffer - | wl-copy"'

# copy to macOS clipboard
if-shell -b 'command -v pbcopy > /dev/null 2>&1' \
   'bind y run -b "\"\$TMUX_PROGRAM\" \${TMUX_SOCKET:+-S \"\$TMUX_SOCKET\"} save-buffer - | pbcopy"'

# copy to Windows clipboard
if-shell -b 'command -v clip.exe > /dev/null 2>&1' \
   'bind y run -b "\"\$TMUX_PROGRAM\" \${TMUX_SOCKET:+-S \"\$TMUX_SOCKET\"} save-buffer - | clip.exe"'

if-shell -b '[ -c /dev/clipboard ]' \
   'bind y run -b "\"\$TMUX_PROGRAM\" \${TMUX_SOCKET:+-S \"\$TMUX_SOCKET\"} save-buffer - > /dev/clipboard"'


# -- buffers -------------------------------------------------------------------

bind-key b list-buffers     # list paste buffers
bind-key p paste-buffer -p  # paste from the top paste buffer
bind-key P choose-buffer    # choose which buffer to paste from


# -- Keybinding Adicionales -----------------------------------------------------

#1. Soporte a 'Vim Tmux Navigator'
#   See: https://github.com/christoomey/vim-tmux-navigator

is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'

tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'

if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

#2. Integracion con 'Facebook PathPicker'
bind-key Q run-shell "sh '#{TMUX_SHELL_PATH}/fun_ohmytmux.sh' _fpp '#{pane_id}' '#{pane_current_path}'"

#3. Integracion con 'UrlScan'

# User options> Options passed to urlscan
set -g @urlscan_options "--compact --dedupe"

#Keybinding
if-shell -b 'command -v urlscan > /dev/null 2>&1' \
   "bind-key U run-shell \"sh '#{TMUX_SHELL_PATH}/fun_ohmytmux.sh' _urlscan '#{pane_id}' '#{@urlscan_options}'\"" \
   "bind-key U run-shell \"sh '#{TMUX_SHELL_PATH}/fun_ohmytmux.sh' _urlview '#{pane_id}'\""


#3. Buscador de URL con FZF

# User options> Extend the capture groups by defining
#set -g @url_extra_filter 'grep -oE "\b[a-zA-Z]+\.txt\b"'
#set -g @url_extra_filter ''

# User options> Default captures the current screen. You can set history_limit to capture the scrollback history.
#set -g @url_history_limit '2000'
#set -g @url_history_limit ''

# User options> Custom fzf options
#set -g @url_fzf_options '--height=80% --tmux=center,100%,80% --multi -0 --no-preview'
#set -g @url_fzf_options ''

# User options> By default, it will use xdg-open, open, or the BROWSER environment variable to open the url, respectively. 
#               If you want to use a different command, you can set @fzf-url-open to the command you want to use.
#set -g @url_open_cmd "firefox"
#set -g @url_open_cmd ''

# Keybinding
bind-key O run-shell "bash '#{TMUX_SHELL_PATH}/fun_fzfutils.bash' init_url '#{@url_open_cmd}' '#{@url_history_limit}' '#{@url_extra_filter}'"

#4. Soporte a 'Tmux Fingers'
#   Logica de inicialización y los Keybinding de 'Tmux Fingers'
if-shell -b 'tmux-fingers version > /dev/null 2>&1' 'run-shell "tmux-fingers load-config"'



# -- Logica principal de presentacion ------------------------------------------

# Variables de shell solo visibles por el script de configuracion y usada por 'Oh-my-tmux'
run-shell '"$TMUX_PROGRAM" source "$TMUX_CONF_PATH/tmux.local.conf"'

# Logica de presentacion de 'Oh-my-tmux'
run-shell 'sh "$TMUX_SHELL_PATH/fun_ohmytmux.sh" _apply_configuration'

