#
# Info de tmux:
#  > Changelog: https://github.com/tmux/tmux/blob/master/CHANGES
#  > Wiki     : https://github.com/tmux/tmux/wiki
#  > OSC 52   : Soporte desde la variosn 2.5
# Version modificada de 'oh-my-tmux' creado/liderado por Gregory Pakosz (@gpakosz). 
#  > URL      : https://github.com/gpakosz/.tmux 
#  > Tmux >= 2.6

##########################################################################################
# Variables de Entorno
##########################################################################################
# Consideraciones:
#  > Se usan directivas condicionales para se ejecute una solo vez (cuando se crea el servidor tmux y no cuando se recargar el
#    el script ('source-file').
#  > Las variable de entorno 'TERM_PROGRAM' y 'TERM_PROGRAM_VERSION', indica un nombre (amigable, no necesariamente el nombre
#    del comando) y la version del emulador de terminal usada. Tmux, desde la version 3.2, despues de iniciar el servidor tmux
#    es definido/modificado, es decir, cuando se ejecute este script por primera vez, los valores de la variables es la terminal
#    usada para iniciar tmux y aun no es valor cambiado por tmux (valor 'tmux' y la version de tmux).
#

#1. Variables de entorno definidas por el usuario

# Ruta del repositorio GIT (donde se almacena los script para el setup y la plantilla personalizado de archivo de configuracion)
%if #{==:#{MY_REPO_PATH},} 
  set-environment -g MY_REPO_PATH "$HOME/.files"
%endif


#2. Variables de entorno calculado usando la informacion de inicio del servidor Tmux

#display-message 'TERM: #{TERM}, TERM_PROGRAM: #{TERM_PROGRAM}, TERM_PROGRAM_VERSION: #{TERM_PROGRAM_VERSION}'

# Nombre del programa tmux. Ejemplo: '/usr/bin/tmux'
%if #{==:#{TMUX_PROGRAM},}
  run-shell 'TMUX_PROGRAM="$(LSOF=$(PATH="$PATH:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin" command -v lsof); $LSOF -b -w -a -d txt -p #{pid} -Fn 2>/dev/null | perl -n -e "if (s/^n((?:.(?!dylib$|so$))+)$/\1/g && s/(?:\s+\([^\s]+?\))?$//g) { print; exit } } exit 1; {" || readlink "/proc/#{pid}/exe" 2>/dev/null)"; {[ -f "$TMUX_PROGRAM" ] && [ -x "$TMUX_PROGRAM" ]} || TMUX_PROGRAM="$(command -v tmux || printf tmux)"; "$TMUX_PROGRAM" -S #{socket_path} set-environment -g TMUX_PROGRAM "$TMUX_PROGRAM"'
%endif

# Ruta de socket IPC del servidor tmux. Ejemplo: '/tmp/tmux-1000/default'
%if #{==:#{TMUX_SOCKET},}
  run-shell '"$TMUX_PROGRAM" -S #{socket_path} set-environment -g TMUX_SOCKET "#{socket_path}"'
%endif

# La ruta del archivo de configuracion principal
%if #{==:#{TMUX_CONF},}
  run-shell '"$TMUX_PROGRAM" set-environment -g TMUX_CONF $(file="#{current_file}"; case "$file" in "") printf "%s" "$MY_REPO_PATH/tmux/tmux.conf";; /*) printf "%s" "$file";; *)  realpath "$file";; esac)'
%endif

# Version de TMUX entero y comparable, por ejemplo '3.2a' convierte a 320, '2.56' convierte a 256, '2.506' convierte a 250
#  - Opcion 'version' se define en la version 2.5
%if #{==:#{TMUX_VERSION},}
  run-shell '"$TMUX_PROGRAM" set-environment -g TMUX_VERSION $(echo "#{version}" | sed -En "s/^[^0-9]*([.0-9]+).*/\1/p" | awk "{ print int(\$1*100) }")'
%endif

#3. Variables de entorno adicionales

# Ruta donde estan los script requeridos para el setup
%if #{==:#{TMUX_SHELL_PATH},} 
  run-shell '"$TMUX_PROGRAM" set-environment -g TMUX_SHELL_PATH "$MY_REPO_PATH/shell/bash/bin/tmux"'
%endif

# Ruta del archivo de configuracion personalizable
%if #{==:#{TMUX_CUSTOM_CONF},}
  run-shell '"$TMUX_PROGRAM" set-environment -g TMUX_CUSTOM_CONF $(if [ -f "${XDG_CONFIG_HOME:-$HOME/.config}/tmux/tmux_custom.conf" ]; then printf "%s" "${XDG_CONFIG_HOME:-$HOME/.config}/tmux/tmux_custom.conf"; else printf "%s" "$MY_REPO_PATH/tmux/template_tmux_custom.conf"; fi)'
%endif


# Variables de entorno con las rutas de script requeridos por 'ohmytmux'
# Por ahora aun esta variable no se calculado internamente (en el script usando la variable 'TMUX_SHELL_PATH'), 
# la logica del script 'fn_ohmytmux.sh' depende de estas variables.
%if #{==:#{TMUX_SHELL_OHMYTMUX},}
  run-shell '"$TMUX_PROGRAM" set-environment -g TMUX_SHELL_OHMYTMUX "$TMUX_SHELL_PATH/fun_ohmytmux.sh"'
%endif

%if #{==:#{TMUX_SHELL_CUSTOM_STATUSBAR},}
  run-shell '"$TMUX_PROGRAM" set-environment -g TMUX_SHELL_CUSTOM_STATUSBAR "$TMUX_SHELL_PATH/fun_custom_statusbar.sh"'
%endif



##########################################################################################
# Opciones Generales
##########################################################################################

set-option -g default-terminal "tmux-256color"
#set-option -g default-terminal "screen-256color"

set-option -w -g xterm-keys on
set-option -s escape-time 10                     # faster command sequences
set-option -sg repeat-time 600                   # increase repeat timeout
set-option -s focus-events on

set-option -g prefix2 C-a                        # GNU-Screen compatible prefix

set-option -q -g status-utf8 on                  # expect UTF-8 (tmux < 2.2)
set-option -w -q -g utf8 on

set-option -g history-limit 5000                 # boost history


##########################################################################################
# Opciones de Display
##########################################################################################

set-option -g base-index 1           # start windows numbering at 1
set-option -w -g pane-base-index 1     # make pane numbering consistent with windows

set-option -w -g automatic-rename on   # rename window to reflect current program
set-option -g renumber-windows on    # renumber windows when a window is closed

set-option -g set-titles on          # set terminal title

set-option -g display-panes-time 800 # slightly longer pane indicators display time
set-option -g display-time 1000      # slightly longer status messages display time

set-option -g status-interval 10     # redraw status line every 10 seconds

# activity
set-option -g monitor-activity on
set-option -g visual-activity off


##########################################################################################
# Keybinding> General
##########################################################################################

# Si se presiona 2 veces 'CTRL + a', se envia 1 'CTRL + a' al panel activo
bind-key C-a send-prefix -2

# clear both screen and history
bind-key -n C-l send-keys C-l \; run-shell 'sleep 0.2' \; clear-history

# reload configuration
bind-key r run-shell '"$TMUX_PROGRAM" ${TMUX_SOCKET:+-S "$TMUX_SOCKET"} source "$TMUX_CONF"' \; display "#{TMUX_CONF} sourced"

# maximize current pane
bind-key + run-shell "bash '#{TMUX_SHELL_PATH}/fun_actions.bash' maximize_pane '#{session_name}' '#D'"


##########################################################################################
# Keybinding> Navegavion
##########################################################################################

# split current window horizontally
bind-key - split-window -v
# split current window vertically
bind-key = split-window -h
bind-key | split-window -h

# pane swap
bind-key > swap-pane -D       # swap current pane with the next one
bind-key < swap-pane -U       # swap current pane with the previous one

# pane resizing
bind-key -r h resize-pane -L 1
bind-key -r j resize-pane -D 1
bind-key -r k resize-pane -U 1
bind-key -r l resize-pane -R 1

# window navigation
unbind-key n
unbind-key p

bind-key -r C-h previous-window # select previous window
bind-key -r C-l next-window     # select next window
bind-key Tab last-window        # move to last active window

# toggle mouse
bind-key m run-shell "bash '#{TMUX_SHELL_PATH}/fun_actions.bash' _toggle_mouse"

# Soporte a 'Vim Tmux Navigator'
# See: https://github.com/christoomey/vim-tmux-navigator

is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|l?n?vim?x?)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'

tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'

if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l


##########################################################################################
# Keybinding> TMUX Session
##########################################################################################

# create session
bind-key C-c new-session

# find session
bind-key C-f command-prompt -p find-session 'switch-client -t %%'

# session navigation
bind-key BTab switch-client -l  # move to last session

# TODO: Homologar con la existente funcion t de profile
bind-key T run-shell "sesh connect \"$(
  sesh list --icons | fzf --tmux center,99%,70% \
    --no-sort --ansi --border-label ' sesh ' --prompt '⚡Session or Path> ' \
    --header '  (^a) all (^t) tmux (^i) configs (^x) zoxide (^d) tmux kill (^g) find git folder' \
    --bind 'tab:down,btab:up' \
    --bind 'ctrl-a:change-prompt(⚡Session or Path> )+reload(sesh list --icons)' \
    --bind 'ctrl-t:change-prompt(🪟 Active sessions> )+reload(sesh list -t --icons)' \
    --bind 'ctrl-i:change-prompt(⚙️ Configured sessions> )+reload(sesh list -c --icons)' \
    --bind 'ctrl-x:change-prompt(📁 Zoxide folder> )+reload(sesh list -z --icons)' \
    --bind 'ctrl-g:change-prompt(🔎 Git folder> )+reload(fd -H -d 2 -t d -E .Trash . ~/code)' \
    --bind 'ctrl-d:execute(tmux kill-session -t {2..})+change-prompt(⚡Session or Path> )+reload(sesh list --icons)' \
    --preview-window 'right:50%' \
    --preview 'sesh preview {}'
)\""


##########################################################################################
# Keybinding> Buffers
##########################################################################################

bind-key b list-buffers     # list paste buffers
bind-key p paste-buffer -p  # paste from the top paste buffer
bind-key P choose-buffer    # choose which buffer to paste from


##########################################################################################
# Keybinding> Copy mode
##########################################################################################


bind-key -T copy-mode-vi v send -X begin-selection
bind-key -T copy-mode-vi C-v send -X rectangle-toggle
bind-key -T copy-mode-vi Escape send -X cancel
bind-key -T copy-mode-vi H send -X start-of-line
bind-key -T copy-mode-vi L send -X end-of-line

#bind-key Enter copy-mode # enter copy mode
#bind-key -T copy-mode-vi y send -X copy-selection-and-cancel


##########################################################################################
# Write/Send text to Clipboard> OSC 52 or Keybinding with external commands
##########################################################################################
# Obtenido de 'https://github.com/tmux/tmux/wiki/Clipboard'
# Las formas mas comunes para que un (emulador de) terminal y sus comandos puedan enviar texto al clipboard son:
#  > OSC 52
#    La terminal, leera el texto con el caracter de control OSC 52 enviado por los comandos dentre de este, y este accedera a la clipboard
#    del SO, y escribira el texto alli (es decir tanto el comando como la terminal deben soportar OSC 52).
#     > tmux soporta OSC 52 desde la version 2.5, para ello debe usar la opcion 'set-clipboard' con valor 'on' o 'external'.
#     > tmux permite reenviar a la terminal todo texto, con caracter de control OSC 52 enviado de cualquier comando dentro de tmux, a la
#       terminal. 
#     > Cuando OSC 52, esta habilitado, tmux ofrece que cualquier texto copiado al buffer, automaticamente se almacena tambien en el clipboard
#       (tmux envia el texto con los caracter de control OSC 52 a la terminal).
#     > Comandos como 'ssh', 'nvim', ... soportan nativamente OSC 52.
#     > Al 2024, en Linux, existe muy pocos emuladores de terminal que tengan soporte completo a Wayland y tambien soporten OSC 52. Existe varias
#       emuladores de temrinales con soporte a X11 y soporte a OSC 52.
#  > Usando keybinding con comandos (externos a tmux) de manejo del clipboard.
#    No requiere que la terminal soporte OSC 52, pero limita los casos de uso para escribir el clipboard:
#     > Solo permite escribir al clipboard el texto lo que se copia al bufer usando el keybinding definido en modo copia (y usualmente asociado a 
#       las acciones 'copy-pipe-and-cancel'). Si activa OSC 52 en tmux, es indiferente si el buffer lo creo un keybinding o un comando, ...
#     > El clipboard a copiar siempre es el servidor donde esta los comandos (externos a tmux). Si dentro de tmux usa 'ssh' y desde alli ejecuta
#       comandos, estos no podran escribir en el buffer del tmux local, y los comandos de manejo de clipboard serian del servidor ssh, no de tmux.
#  > Usando de 'ctrl+C' para enviar texto al portapapeles y 'ctrl+V' para obtener texto del portapapeles:
#     > Cuando (el panel actual de) la terminal no está ejecutando un comando, las terminales procesan estas teclas y acceden al clipboard:
#       > Ante cualquier texto seleccionado (ya sea con el ratón o con otros atajos de teclado), usando 'ctr+C', la puede capturar el terminal y 
#         enviarla al clipboard del SO (donde está la terminal).
#         > Algunas  terminales permiten el copiado automático ante cualquier texto seleccionado a la terminal, solo requiere seleccionar y esto 
#           ya se copia en la terminal.
#         > Esta opción permite enviar al portapapeles cual texto del STDOUT generado por el comando (después de su ejecución).
#         > Cuando este en la línea de ejecución del prompt  actual de la terminal, puede usar 'ctrl+V' para obtener el texto del portapapeles y
#           pegarlo después del prompt actual.
#     > Cuando (el panel actual de) la terminal está ejecutando un comando, las terminales la terminales reenvias las teclas al comando de 
#       ejecución:
#       > Cuando se usa 'ctrl+V', es la terminal la que obtiene el texto del portapapeles y reenvía la tecla 'ctrl+V' al comando de ejecución.
#       > Algunos comandos, como 'vim', 'nvim', 'tmux', 'ssh', …. implementan un acción frente a este evento algunos no lo implementan.
#       > Cuando se usa 'ctrl+C', este se envía al programa, pero muchos comandos una accion para gestionar el portapapeles, debido a que acoplan
#         la lógica del comando con el API de gestión de portapapeles del SO.
# La forma a usar se establece al inicio cuando el servidor es esta creando y no puede ser cambiado hasta que el servidor se detenta 'kill-server'.
# La variable de entorno 'TMUX_SET_CLIPBOARD' es calculado y sus posibles valores son:
#        > No se ha podido establecer un mecanismo del clipboard (se indica que usa comando externo, pero no se ubica.
#      0 > Usar comandos externo de clipboard y la opcion 'set-clipboard' en 'off'
#      1 > Usar OSC 52 con la opcion 'set-clipboard' en 'on'
#      2 > Usar OSC 52 con la opcion 'set-clipboard' en 'external'
# Los terminales 'kitty', 'alacritty', 'foot' no crean, por defecto, la variable de entorno 'TERM_PROGRAM', pero es requerido para identicarlo como
# emuladores de terminales que soportan OSC 52, por lo que debera definir dicha variable, con el valor 'kitty', 'alacritty' y 'foot' respectivamente,
# en su archivo de configuracion.
#

%if #{==:#{TMUX_SET_CLIPBOARD},}

    # Parametro de entrada:
    # 1> La variable el key que se ascoadia al copiado del buffer en modo copia (accion 'copy-pipe-and-cancel' en el modo 'copy-mode-vi'
    # 2> La variable de entorno 'SET_CLIPBOARD' pueden tener los siguientes valores:
    #       > Determinar automaticamente la la opcion correcta: si la terminal soporta OSC lo habilta, si no usa comandos externos.
    #     0 > Usar comandos externo de clipboard y la opcion 'set-clipboard' en 'off'
    #     1 > Usar OSC 52 con la opcion 'set-clipboard' en 'on'
    #     2 > Usar OSC 52 con la opcion 'set-clipboard' en 'external'
    #   Puede usarlo, la cuando crea la primera session:
    #   Ejemplo 1:
    #     SET_CLIPBOARD=1 tmux new-session -s main -n w01
    #   Ejemplo 2:
    #     export SET_CLIPBOARD=1
    #     tmux new-session -s main -n w01
    #
    run-shell 'bash "$TMUX_SHELL_PATH/fun_general.bash" setting_clipboard 'y' #{SET_CLIPBOARD}'

%endif

##########################################################################################
# Custom Settings> Custom options, Enviroment variables for setup shell
##########################################################################################

# 'source-file' no soporta expansion de format
run-shell '"$TMUX_PROGRAM" source-file "$TMUX_CUSTOM_CONF"'


##########################################################################################
# Keybinding> Custom
##########################################################################################

#1. Integracion con 'Facebook PathPicker'
if-shell -b 'fpp --version > /dev/null 2>&1' \
   "bind-key Q run-shell \"bash '#{TMUX_SHELL_PATH}/fun_general.bash' fpp '#{pane_id}' '#{pane_current_path}'\"" 

#2. Integracion con 'UrlScan'
if-shell -b 'command -v urlscan > /dev/null 2>&1' \
   "bind-key U run-shell \"bash '#{TMUX_SHELL_PATH}/fun_general.bash' urlscan '#{pane_id}' '#{@urlscan_options}'\"" \
   "bind-key U run-shell \"bash '#{TMUX_SHELL_PATH}/fun_general.bash' urlview '#{pane_id}'\""


#3. Buscador de URL con FZF
bind-key O run-shell "bash '#{TMUX_SHELL_PATH}/fun_general.bash' init_url '#{@url_open_cmd}' '#{@url_history_limit}' '#{@url_extra_filter}'"

#4. Soporte a 'Tmux Fingers' (https://github.com/Morantron/tmux-fingers)
#%if #{==:#{@use_tmux_thumbs},true}

   #bind-key F run-shell -b "bash '#{TMUX_SHELL_PATH}/fun_general.bash' start_tmux_thumbs"

#5. Soporte 'Tmux Thumbs' (https://github.com/fcsonline/tmux-thumbs)
#%else

    #   > Logica de inicialización
    #   > Por defecto fefine los siguientes keybinding:
    #     > 'prefix, F' : ingresar al 'defult fingers mode'
    #     > 'prefix, J' : ingresar al 'jump fingers mode'
    if-shell -b 'tmux-fingers version > /dev/null 2>&1' 'run-shell "tmux-fingers load-config"'

#%endif


##########################################################################################
# Logica de presentacion
##########################################################################################

# Logica de presentacion de 'Oh-my-tmux'
run-shell 'sh "$TMUX_SHELL_PATH/fun_ohmytmux.sh" _apply_configuration'

#Only for debugging
#display-message 'Executing _apply_256color'
#run-shell 'sh "$TMUX_SHELL_PATH/fun_ohmytmux.sh" _apply_256color'
#display-message 'Executing _apply_24b'
#run-shell 'sh "$TMUX_SHELL_PATH/fun_ohmytmux.sh" _apply_24b'
#display-message 'Executing _apply_theme'
#run-shell 'sh "$TMUX_SHELL_PATH/fun_ohmytmux.sh" _apply_theme'
#display-message 'Executing _apply_bindings'
#run-shell 'sh "$TMUX_SHELL_PATH/fun_ohmytmux.sh" _apply_bindings'

#display-message 'Executing _apply_plugins'
#run-shell 'sh "$TMUX_SHELL_PATH/fun_ohmytmux.sh" _apply_plugins'
#display-message 'Executing _apply_important'
#run-shell 'sh "$TMUX_SHELL_PATH/fun_ohmytmux.sh" _apply_important'

#display-message 'TERM: #{TERM}, TERM_PROGRAM: #{TERM_PROGRAM}, TERM_PROGRAM_VERSION: #{TERM_PROGRAM_VERSION}'


